/* generated by 'bin/codeGen/templateGenerate.js' */
type RgbaColorMatch = [string, string, string, string | undefined];
const rgbItem = (val: string) => parseInt(val).toString(16).padStart(2, '0');

// 将 RGBA 颜色转换为 16 进制颜色
export function rgbaToHex(rgbaColor: string) {
    const [r, g, b, a = '1'] = rgbaColor.match(/\d+/g) as RgbaColorMatch;
    const color = [r, g, b].map(rgbItem).join('');
    const alpha = Math.round(parseFloat(a) * 255).toString(16).padStart(2, '0');
    return `#${color}${alpha}`.toUpperCase();
}

// 将 16 进制颜色转换为 RGBA 颜色
export function hexToRgba(hexColor: string) {
    const rgba: any[] = [];
    rgba.push(parseInt(hexColor.substring(1, 3), 16));
    rgba.push(parseInt(hexColor.substring(3, 5), 16));
    rgba.push(parseInt(hexColor.substring(5, 7), 16));
    if (hexColor.length > 7) {
        rgba.push(
            parseFloat(String(
                parseInt(hexColor.substring(7, 9), 16)
            )) / 255
        );
    } else {
        rgba.push(1); // 如果没有 alpha 值，则默认为 1
    }
    return `rgba(${rgba.join(',')})`;
}
