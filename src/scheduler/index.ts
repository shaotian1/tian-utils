/* generated by 'bin/templateGenerate.js' */
type Task = Function;
type TaskList = Task[];
type TScheduler = {
    addTask: (task: Task) => void;
    start: () => void;
}

export class Scheduler implements TScheduler {
    private maxLimit: number = 3;
    private runningCount: number = 0;
    private taskList: TaskList = [];

    constructor(maxLimit: number) {
        this.maxLimit = maxLimit;
    }

    addTask(task: Task) {
        if (typeof task === 'function') {
            this.taskList.push(task);
        }
    }

    start() {
        for (let i = 0; i < this.maxLimit; i++) {
            this.run();
        }
    }

    private async run() {
        const noTask = this.taskList.length === 0;
        const isMax = this.runningCount >= this.maxLimit;

        if (noTask || isMax) {
            return;
        }

        try {
            this.runningCount++;
            const task = this.taskList.shift() as Task;
            await task();
        } catch (error) {
            throw error;
        } finally {
            this.runningCount--;
            this.run();
        }
    }
}