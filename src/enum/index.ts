/* generated by 'bin/templateGenerate.js' */
import {isAvailableKey} from '../utils';

interface EnumItem {
    [x: string]: any,
    alias: string | number,
    text: string,
    value: string | number
}
interface IEnum {
    [x: string]: any
}

const aliasIndex = Symbol('aliasIndex');
const textIndex = Symbol('textIndex');
const valueIndex = Symbol('valueIndex');

export class Enum implements IEnum {
    constructor(...argvs: any[]) {
        this[aliasIndex] = {};
        this[textIndex] = {};
        this[valueIndex] = {};

        argvs.forEach((item, index) => {
            this.addItem(item, index);
        });
    }

    addItem(item: EnumItem, index?: number) {
        const copyItem = {...item};
        const noIndex = index === undefined || index === null;
        const finalIndex = noIndex ? this.getCurrentIndex() : index;
        !isAvailableKey(copyItem, 'alias') && (copyItem.alias = String(finalIndex));
        !isAvailableKey(copyItem, 'text') && (copyItem.text = String(finalIndex));
        !isAvailableKey(copyItem, 'value') && (copyItem.value = Number(finalIndex));

        this[aliasIndex][copyItem.alias] = copyItem;
        this[textIndex][copyItem.text] = copyItem;
        this[valueIndex][copyItem.value] = copyItem;

        this[copyItem.alias] = copyItem.value;
        this[copyItem.value] = copyItem.alias;
    }

    getCurrentIndex() {
        return Math.max(
            Object.keys(this[aliasIndex]).length,
            Object.keys(this[textIndex]).length,
            Object.keys(this[valueIndex]).length
        );
    }

    fromAlias(alias: string | number): EnumItem | undefined {
        return this[aliasIndex][alias];
    }

    fromText(text: string): EnumItem | undefined {
        return this[textIndex][text];
    }

    fromValue(value: string | number): EnumItem | undefined {
        return this[valueIndex][value];;
    }

    getAliasFromText(text: string) {
        const target = this.fromText(text);
        return target?.alias;
    }

    getAliasFromValue(value: string | number) {
        const target = this.fromValue(value);
        return target?.alias;
    }

    getTextFromAlias(alias: string | number) {
        const target = this.fromAlias(alias);
        return target?.text;
    }

    getTextFromValue(value: string | number) {
        const target = this.fromValue(value);
        return target?.text;
    }

    getValueFromAlias(alias: string | number) {
        const target = this.fromAlias(alias);
        return target?.value;
    }

    getValueFromText(text: string) {
        const target = this.fromText(text);
        return target?.value;
    }

    toArray() {
        return Object.entries(this[valueIndex]).map(([_, value]) => value);
    }

    toJson() {
        const result = {};
        Object.entries(this[valueIndex]).forEach(([key, value]) => {
            result[key] = (value as EnumItem).text;
        });
        return result;
    }
}

